@page "/request/Maintenance"

@attribute [Authorize]

@inject IAccountService AccountService
@inject ISearchService SearchService
@inject IAlertService AlertService
@inject IRequestService RequestService
@inject ITelerikStringLocalizer Localizer

<h1 class="page-title">Request Maintenance</h1>

@if (AccountService.user.isManager)
{
    <TelerikGrid Data=@GridData
                 Height="500px" Sortable="true"  Resizable="true"  Pageable="true" PageSize=@PageSize>
        <GridColumns>
            <GridColumn Field=@nameof(Request.UserId) Editable="false" Title="Requester" />
            <GridColumn Field=@nameof(Request.RequestField) Editable="false" Title="Field" />
            <GridColumn Field=@nameof(Request.RequestChange) Editable="false" Title="Change" />
            <GridColumn Field=@nameof(Request.OldRequestBlob) Editable="false" Title="Old Blob" />
            <GridColumn Field=@nameof(Request.NewRequestBlob) Editable="false" Title="New Blob" />
            <GridColumn Field=@nameof(Request.RequestDate) Editable="false" Title="Date" />
            <GridCommandColumn>
                <GridCommandButton Command="Approve" Icon="save" OnClick="ApproveHandler">Approve</GridCommandButton>
                <GridCommandButton Command="Deny" Icon="cancel" OnClick="DenyHandler">Deny</GridCommandButton>
            </GridCommandColumn>
        </GridColumns>
    </TelerikGrid>
}
else
{
    <TelerikGrid Data=@GridData
                 Height="500px" Sortable ="true" Resizable="true" Pageable="true" PageSize=@PageSize>
        <GridColumns>
            <GridColumn Field=@nameof(Request.UserId) Editable="false" Title="Requester" />
            <GridColumn Field=@nameof(Request.RequestField) Editable="false" Title="Field" />
            <GridColumn Field=@nameof(Request.RequestChange) Editable="false" Title="Change" />
            <GridColumn Field=@nameof(Request.RequestDate) Editable="false" Title="Date" />
            <GridColumn Field=@nameof(Request.isApproved) Editable="false" Title="Approved" />
            <GridColumn Field=@nameof(Request.isDenied) Editable="false" Title="Denied" />
            <GridColumn Field=@nameof(Request.ResponseDate) Editable="false" Title="Responded" />
            <GridColumn Field=@nameof(Request.ManagerUserId) Editable="false" Title="Manager" />
        </GridColumns>
    </TelerikGrid>
}

@code
{
    @using System.Collections.Generic;
    @using Telerik.Blazor.Services;
    @using System.Collections.ObjectModel

    public int Total { get; set; } = 0;

    int PageSize = 10;

    private List<CSUBWorkFlowProject.Shared.Models.Request> requests;
    private List<CSUBWorkFlowProject.Shared.Models.Request> GridData;

    protected override async Task OnInitializedAsync()
    {

        await GetGridData();
    }

    async Task GetGridData()
    {
        requests = new List<Request>();
        if (AccountService.user.isManager)
        {
            requests = (await RequestService.GetPendingRequests()).ToList();
        }
        else
        {
            requests = (await RequestService.GetUserRequests(AccountService.user.userid)).ToList();
        }

        GridData = new List<Request>(requests);
    }

    private async Task ApproveHandler(GridCommandEventArgs args)
    {
        var request = args.Item as Request;

        try
        {
            AlertService.Clear();
            RequestService.ApproveRequest(request, AccountService.user.userid);
            AlertService.Success("Request Approved");
            GridData.Clear();
            await GetGridData();
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }
    private async Task DenyHandler(GridCommandEventArgs args)
    {
        var request = args.Item as Request;

        try
        {
            AlertService.Clear();
            RequestService.DenyRequest(request, AccountService.user.userid);
            AlertService.Success("Request Denied");
            GridData.Clear();
            await GetGridData();

        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }
}
